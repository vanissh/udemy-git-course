Работа с удаленным репозиторием

git remote
команда для настройки и просмотра удаленных репозиториев

* git remote -v - просмотри списка существующих удаленных репозиториев

* git remote add НАЗВАНИЕ_РЕПОЗИТОРИЯ АДРЕС_РЕПОЗИТОРИЯ - добавить удаленный
                    репозиторий, находящийся по указанному адресу

* git remote remove НАЗВАНИЕ_РЕПОЗИТОРИЯ - удалить репозиторий с указанным 
                    названием

________________________________________________________________
git push

* git push НАЗВАНИЕ_УДАЛЕННОГО_РЕПОЗИТОРИЯ ВЕТКА - отправка локального репозитория
                    на удаленный

                    git push origin master

________________________________________________________________
git pull

* git pull origin master gi- получение данных с удаленного репозитория

________________________________________________________________
git clone 

клонирует в локальную папку удаленный репозиторий, 
    заменяет набор команд git init + git remote add + git pull



Ветвление
________________________________________________________________
git branch

- создание новой ветки
* git branch some-feature - новая ветка "отпочковывается" с ветки master, c того коммита, на котором
                            сейчас находимся

* git branch - показывает, на какой ветке находится указатель HEAD

* git branch -d some-feature - удаление ветки с названием some-feature

________________________________________________________________
git checkout - переключение между ветками

* git checkout some-feature - переключение на ветку some-feature

________________________________________________________________
git merge 

сливает одну ветку с другой 

f.e. рабочая версия приложения находится на ветке master, а фичи на побочных ветках 
чтобы добавить фичи в master, нужно вызвать команду 
* git checkout master - переключение на master, а затем 
* git merge add-feature1 - слить ветку в master

            * Fast forward - во время работы с побочной веткой на master не было коммитов, самый легкий
                            вариант слияния, не создается merge commit, не может возникнуть конфликтов
            * Merge made by the recursive strategy - во время работы с побочной веткой на master были
                            произведены изменения, но изменялись разные файлы, поэтому не возникает
                            конфликтов
            * Merge made by the 'ort' strategy.

