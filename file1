Hello world!!!

Разные способы сделать git add

git add <список файлов>
git add . - добавить все файлы в текущей папке
git add *.js - все файлы в текущей папке с расширением js
git add someDir/*.js - все файлы в папке someDir с расширением js
git add someDir/ - все файлы в папке someDir

git log - посмотреть всю историю коммитов

________________________________________________________________
git diff - показывает разницу между текущим неотслеживаемым состоянием репозитория
            и последним коммитом репозитория

git diff --staged - показывает разницу между текущим отслеживаемым состоянием 
            репозитория и последним коммитом репозитория

git diff COMMIT_ID - показывает разницу между текущим состоянием 
            репозитория и указанным коммитом репозитория

________________________________________________________________
git reset

по умолчанию используется ветка master

указатель HEAD - указывает на последний(текущий) коммит
HEAD^ - смещение на 1 коммит назад
HEAD^^ / HEAD~2 - смещение на 2 коммита назад

git reset имеет 3 режима:
--soft / --mixed / --hard

* git reset --hard - возвращает проект к указанному коммиту, при этом
                    полностью удаляет все коммиты после указанного(БЕЗВОЗВРАТНО!)

                    git reset --hard HEAD^^ (можно использовать хэш)
                
* git reset --mixed - возвращает проект к указанному коммиту, при этом
                    переводит все коммиты после указанного в неотслеживаемую(unstaged)
                    зону
                
* git reset --soft - возвращает проект к указанному коммиту, при этом
                    переводит все коммиты после указанного в отслеживаемую(staged)
                    зону

** по умолчанию без вызова параметров git reset = git reset --mixed HEAD

f.e. чтобы исправить сообщение в коммите, можно вызвать git reset --soft HEAD^ 
и переписать коммит

Никогда не делать git reset<commit n> после того, как опубликовали какие-либо
коммиты после <commit n> 

________________________________________________________________
git checkout

перемещение между коммитами, версиями отдельных файлов и ветками

git checkout - перемещение м/у коммитами - можно посмотреть, как
                выглядел проект на каком-либо коммите в прошлом, 
                не меняет файлы

                git checkout <хэш commit 2>
                git checkout HEAD^^ / HEAD~2

перед применением нужно закоммитить текущие изменения

состояние проекта полностью возвращается к указанному снимку. При этом
коммиты не удаляются. Указатель HEAD находится в состоянии DETACHED(отдаленный).
Он отделен от актуальной версии проекта. Любые изменения или коммиты, сделанные в 
этом состоянии, удаляются сборщиком мусора

git checkout master - переход к актуальному коммиту

---------------------

git checkout - перемещение между версиями файлов, реально меняет файлы

git checkout <хэш коммита> -- путь_до_файла_1 путь_до_файла_2
* git checkout 114dfb268dbfd09b8d70c739f5cddf0741173f23 -- file1 file2 - 
            возвращает 2 файла к версии, которая была у них в указанном
            коммите 

* git checkout -- file1 - возвращает файлы к версии, которая была в самом
                        последнем коммите (HEAD). Работает только
                        для неотслеживаемых изменений

* git checkout -- . - возвращает все файлы к последнему коммиту. Только для 
                    неотслеживаемых файлов

-----------------------
Как удалить отслеживаемые изменения: 
1. git reset - переводит все отслеживаемые изменения в неотслеживаемые
2. git checkout -- . - удаляет все неотслеживаемые изменения

-----------------------
Зачем использовать -- ? 

-- указывают, что после них идет обычный текст, а не команда или параметр для команды
Если есть файл с названием master, то: 

* git checkout master - переход к актуальному коммиту(ветке master)
* git checkout -- master - возвращает файл с названием master к версии из последнего коммита

________________________________________________________________
git commit 

* git commit -a -m - добавляет только модифицированные файлы. Не добавляет в отслеживаемую зону
                    новые файлы

* git commit --amend -m  - дополняет последний коммит, добавляя в него свежие изменения. Меняет 
                    сообщение последнего коммита. Новый коммит не создается

* git commit --amend - не переписывает сообщение